13.2.1 - e f

13.2.2
because you can use a general method to compare two classes which are subclasses of geometric object
The benefits are for generic programming. A variable of GeometricObject type can use the getArea and getPerimeter methods at compilation time.

13.2.3
a) true
b) true
c) false
d) false
e) true

13.3.1
because numberRef is an instance of integer, not double

13.3.2
because when creating the array, specified that the array type will be integer and not doubles

13.3.3
3, 3.0

13.3.4
Integers and Doubles have the compareTo method. The Number superclass does not. x is declared as a Number type. The program has a syntax error because x does not have the compareTo method.

13.3.5
trying to cast the result of x.compareTo(4) to an integer, but x is a Number type and it doesn't have a compareTo method.

13.4.1 No. Calendar is an abstract class.
13.4.2 add
13.4.3 new GregorianCalendar()
13.4.4
c.get(Calendar.DATE)
c.get(Calendar.MONTH)
c.get(Calendar.YEAR)
c.get(HOUR)
c.get(MINUTE)
c.get(SECOND)

13.5.1 no
13.5.2 true
13.5.3 d, e, f
13.5.4
in class B - m1 needs to be an override function
All methods defined in an interface are public. When a class implements the interface, the method must be declared public. The visibility cannot be reduced.

13.6.1 true
13.6.2 public int compareTo(String o)
13.6.3 no - because one is of type integer and the other is of type object
13.6.4
By implementing the Comparable interface, the object of the class can be passed to a method that requires a Comparable type.
because by implementing the interface, you are making a contract between the class that every class that implements
that interface must follow the contract - meaning any sub class would be able to use the compareTo method also

13.6.5
The person class isn't implementing the Comparable interface.

13.6.6
public int compareTo(ComparableRectangle o) {
return getArea() > o.getArea() ? 1 : getArea() < o.getArea() ? -1 : 0;
}

@Override
public boolean equals(Object o) {
  return getArea() == ((CompareRectangle)o).getArea();
}

13.6.7
if (new BigDecimal(number + "").compareTo
         (new BigDecimal(list.get(i) + "")) < 0)

13.7.1
no - it will get a CloneNotSupported error
yes

13.7.2
if not override the clone method - the program would receive a syntax error because clone() is protected in java.lang.Object
if not implementing cloneable - then the house wouldn't be able to be cloned

13.7.3
true
false
true

13.7.4
true
false
list is New York, Atlanta
list1 is New York, Atlanta
list2.get(0) is New York
list2.size() is 1

13.7.5
a compile error is reported because clone() is protected in Object. To enable cloning, do two things: (1) override clone() in the class for the object to be cloned; (2) implement java.lang.Cloneable for the class.

13.7.6
false, because the default equals method in the Object class is used. If the equals method is overridden in the House class to return true for two houses with the same id and area, the output will be true.

13.8.1
Edible -> can be applied ot aything that is edible, whereas if its in a class, it might not always be appropariate (e.g.how to eat in animal class)

13.8.2
An abstract class is a class that:
- Can have both abstract methods (without body) and concrete methods (with implementation).
- Can define fields (variables) and constructors.
- Can have access modifiers (public, protected, etc.) for methods and variables.
- Is used when classes share common behavior or state.

An interface:
- Can only contain abstract methods (until Java 8), but now can also have default and static methods.
- Cannot have instance fields (only constants with public static final).
- Does not have constructors.
- Is used for defining contracts or capabilities a class must implement.

13.8.3
a) ture
b) true
c) true
d) false
e) true

13.9.1
-1
3
0
-0.33333

13.9.2
r1 is a Rational but r2 is an object - can't compare - The Object type r2 does not have the compareTo method.

13.9.3
as above - The compareTo(Rational) method requires a Rational type object in the parameter in the Rational class.

13.9.4
public boolean equals (Object other) {
return (this.subtract((Rational)(other))).getNumerator() == 0;
}

public int compareTo(Rational o) {
  return this.subtract(o).getNumerator() > 0 ? 1 :
    (this.subtract(o).getNumerator() == 0 ? 0 : -1);
}

13.9.5
0/4

13.9.6
public String toString() {
  if (numerator == 0 || denominator == 1)
    return numerator + "";
  else
    return numerator + "/" + denominator;
}

